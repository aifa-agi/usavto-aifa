// @/config/appConfig.ts
// Comments in English: Single source of truth for SEO/PWA. Everything reads from here.

const site_url = "https://usavtopro.ru";

export const appConfig: AppConfig = {
  name: "USAUTO Путевые листы",
  short_name: "USAUTO ",
  description: "USAUTO Путевые листы, Управление коммерческим автопаркомОблачное решение комплексного управления коммерческим автомобильным парком. ",
  url: site_url,


  manifest: "/manifest.webmanifest",

  lang: "ru",
  mailSupport: "support@aifa.dev",
  chatBrand: "Chat GPT",


  images: {
    "ogImage": {
      path: "/app-config-images/og-image.jpg",
      format: "jpeg",
      uploadedAt: "2025-10-07T18:08:18.946Z",
    },"loading-dark": {
      path: "/app-config-images/loading-dark.svg",
      format: "svg",
      uploadedAt: "2025-10-06T12:00:00.000Z",
    },
        "loading-light": {
      path: "/app-config-images/loading-light.svg",
      format: "svg",
      uploadedAt: "2025-10-06T16:27:11.940Z",
    },
        "notFound-dark": {
      path: "/app-config-images/not-found-dark.svg",
      format: "svg",
      uploadedAt: "2025-10-06T16:27:57.553Z",
    },
        "notFound-light": {
      path: "/app-config-images/not-found-light.svg",
      format: "svg",
      uploadedAt: "2025-10-06T16:28:25.977Z",
    },
        "error500-dark": {
      path: "/app-config-images/error500-dark.svg",
      format: "svg",
      uploadedAt: "2025-10-06T16:30:00.276Z",
    },
        "error500-light": {
      path: "/app-config-images/error500-light.svg",
      format: "svg",
      uploadedAt: "2025-10-06T16:29:31.928Z",
    },
    "homePage-dark": {
      path: "/app-config-images/homepage-dark.png",
      format: "png",
      uploadedAt: "2025-10-06T21:14:35.330Z",
    },
    "homePage-light": {
      path: "/app-config-images/homepage-light.png",
      format: "png",
      uploadedAt: "2025-10-06T21:15:18.904Z",
    },"chatbot-dark": {
      path: "/app-config-images/chatbot-dark.png",
      format: "png",
      uploadedAt: "2025-10-06T20:51:12.780Z",
    },
    "chatbot-light": {
      path: "/app-config-images/chatbot-light.png",
      format: "png",
      uploadedAt: "2025-10-06T20:51:52.414Z",
    },},

  // Logo field - handled by separate upload flow with icon generation
  logo: "/app-config-images/logo.png",

  // Icons set for Metadata API and PWA (generated by logo upload)
  icons: {
    icon32: "/app-config-images/icons/icon-32.png",
    icon48: "/app-config-images/icons/icon-48.png",
    icon192: "/app-config-images/icons/icon-192.png",
    icon512: "/app-config-images/icons/icon-512.png",
    appleTouch: "/app-config-images/icons/apple-touch-icon.png",
  },

  // PWA defaults
  pwa: {
    themeColor: "#ffffff",
    backgroundColor: "#ffffff",
    startUrl: "/",
    display: "standalone",
    scope: "/",
    orientation: "any",
  },

  // SEO and crawling
  seo: {
    indexing: "allow",
    sitemapUrl: `${site_url}/sitemap.xml`,
    disallowPaths: ["/admin", "/auth", "/login", "/register", "/chat", "/api", "/_next"],
    canonicalBase: site_url,
    locales: ["ru"],
    defaultLocale: "ru",
    social: {
      twitter: "@aifa_agi",
      github: "https://github.com/aifa-agi/aifa",
    },
  },

  // Open Graph / Twitter defaults
  og: {
    type: "website",
    locale: "ru_RU",
    siteName: "USAUTO ",
    imageWidth: 1200,
    imageHeight: 630,
  },

  // Per-page defaults (can be overridden by constructMetadata arguments)
  pageDefaults: {
    titleTemplate: "%s | USAUTO ",
    robotsIndex: true,
    robotsFollow: true,
  },

  messages: {
    loading: {
      title: "Loading...",
      subtitle: "Please wait",
    },
  },
};

// ============================================
// TYPE DEFINITIONS
// ============================================

export type SupportedLang = "ru" | "en" | "es" | "fr" | "de" | "it";


export type ImageFormat = "png" | "jpg" | "jpeg" | "webp" | "avif" | "svg" | "gif";


export type RegularImageType = 
  | "ogImage" 
  | "loading-dark" 
  | "loading-light"
  | "notFound-dark"
  | "notFound-light"
  | "error500-dark"
  | "error500-light"
  | "homePage-dark"
  | "homePage-light"
  | "chatbot-dark"
  | "chatbot-light";

/**
 * Comments in English: All image types including logo (for type checking)
 */
export type AllImageTypes = RegularImageType | "logo";

/**
 * Comments in English: Metadata stored for each uploaded image
 */
export interface ImageMetadata {
  /** Full path with extension: "/app-config-images/og-image.jpg" */
  path: string;
  /** File format/extension without dot: "jpg", "png", "svg" */
  format: ImageFormat;
  /** ISO 8601 timestamp of last upload */
  uploadedAt: string;
  /** Optional: File size in bytes */
  size?: number;
  /** Optional: Image dimensions in pixels */
  dimensions?: {
    width: number;
    height: number;
  };
}

/**
 * Comments in English: Main application configuration interface
 */
export interface AppConfig {
  name: string;
  short_name: string;
  description: string;
  url: string;
  manifest: string;
  mailSupport: string;
  lang: SupportedLang;
  chatBrand: string;

  // ✅ Dynamic images with metadata (excluding logo)
  images: Record<RegularImageType, ImageMetadata>;

  // Logo field - NOT part of images, handled separately
  logo: string;

  icons: {
    faviconAny?: string;
    icon32?: string;
    icon48?: string;
    icon192: string;
    icon512: string;
    appleTouch?: string;
  };

  pwa: {
    themeColor: string;
    backgroundColor: string;
    startUrl: string;
    display: "fullscreen" | "standalone" | "minimal-ui" | "browser";
    scope?: string;
    orientation?: "any" | "portrait" | "landscape";
  };

  seo: {
    indexing: "allow" | "disallow";
    sitemapUrl?: string;
    disallowPaths?: string[];
    canonicalBase?: string;
    locales?: string[];
    defaultLocale?: string;
    social?: {
      twitter?: string;
      github?: string;
      linkedin?: string;
      facebook?: string;
    };
  };

  og?: {
    type?: "website" | "article" | "profile" | "video.other";
    locale?: string;
    siteName?: string;
    imageWidth?: number;
    imageHeight?: number;
  };

  pageDefaults?: {
    titleTemplate?: string;
    robotsIndex?: boolean;
    robotsFollow?: boolean;
  };

  messages?: {
    loading?: {
      title?: string;
      subtitle?: string;
    };
  };
}

// ============================================
// HELPER FUNCTIONS
// ============================================

/**
 * Comments in English: Get image path for regular (non-logo) images
 * Returns path from images metadata with proper extension
 * 
 * @param imageType - Type of regular image (e.g., "ogImage", "loading-dark")
 * @returns Full path to image file (e.g., "/app-config-images/og-image.jpg")
 * 
 * @example
 * const path = getImagePath("error500-dark");
 * // Returns: "/app-config-images/error500-dark.svg" or "/app-config-images/error500-dark.png"
 */
export function getImagePath(imageType: RegularImageType): string {
  const metadata = appConfig.images[imageType];
  if (!metadata?.path) {
    console.error(`[appConfig] Image metadata not found for type: ${imageType}`);
    // Fallback to default path with .svg extension
    return `/app-config-images/${imageType}.svg`;
  }
  return metadata.path;
}

/**
 * Comments in English: Get image format/extension without dot
 * 
 * @param imageType - Type of regular image
 * @returns File format (e.g., "png", "svg", "jpg")
 */
export function getImageFormat(imageType: RegularImageType): ImageFormat {
  const metadata = appConfig.images[imageType];
  if (!metadata?.format) {
    console.warn(`[appConfig] Format not found for ${imageType}, defaulting to svg`);
    return "svg";
  }
  return metadata.format;
}

/**
 * Comments in English: Get logo path
 * Logo is NOT part of images - handled by separate upload flow
 * 
 * @returns Logo file path
 */
export function getLogoPath(): string {
  return appConfig.logo;
}

/**
 * Comments in English: Get OG image path (from images metadata)
 * 
 * @returns OG image path for social media sharing
 */
export function getOgImagePath(): string {
  return getImagePath("ogImage");
}

/**
 * Comments in English: Get loading illustration by theme
 * 
 * @param theme - "dark" or "light" theme
 * @returns Path to loading illustration
 * 
 * @example
 * const darkLoading = getLoadingIllustration("dark");
 * // Returns: "/app-config-images/loading-dark.svg" (or .png if uploaded as PNG)
 */
export function getLoadingIllustration(theme: "dark" | "light"): string {
  const imageType: RegularImageType = theme === "dark" ? "loading-dark" : "loading-light";
  return getImagePath(imageType);
}

/**
 * Comments in English: Get start chat illustration (uses logo)
 * 
 * @returns Path to start chat illustration (same as logo)
 */
export function getStartChatIllustration(): string {
  return appConfig.logo;
}

/**
 * Comments in English: Get error page illustration by type and theme
 * 
 * @param errorType - "404" or "500"
 * @param theme - "dark" or "light"
 * @returns Path to error page illustration
 * 
 * @example
 * const error404Dark = getErrorIllustration("404", "dark");
 * // Returns: "/app-config-images/not-found-dark.svg"
 */
export function getErrorIllustration(
  errorType: "404" | "500", 
  theme: "dark" | "light"
): string {
  let imageType: RegularImageType;
  
  if (errorType === "404") {
    imageType = theme === "dark" ? "notFound-dark" : "notFound-light";
  } else {
    imageType = theme === "dark" ? "error500-dark" : "error500-light";
  }
  
  return getImagePath(imageType);
}

/**
 * Comments in English: Get home page illustration by theme
 * 
 * @param theme - "dark" or "light"
 * @returns Path to home page illustration
 */
export function getHomePageIllustration(theme: "dark" | "light"): string {
  const imageType: RegularImageType = theme === "dark" ? "homePage-dark" : "homePage-light";
  return getImagePath(imageType);
}

/**
 * Comments in English: Get chatbot illustration by theme
 * 
 * @param theme - "dark" or "light"
 * @returns Path to chatbot illustration
 */
export function getChatbotIllustration(theme: "dark" | "light"): string {
  const imageType: RegularImageType = theme === "dark" ? "chatbot-dark" : "chatbot-light";
  return getImagePath(imageType);
}

/**
 * Comments in English: Get full image metadata object
 * 
 * @param imageType - Type of regular image
 * @returns Complete metadata object or null if not found
 */
export function getImageMetadata(imageType: RegularImageType): ImageMetadata | null {
  return appConfig.images[imageType] || null;
}

/**
 * Comments in English: Check if image has metadata (was uploaded via admin panel)
 * 
 * @param imageType - Type of regular image
 * @returns true if metadata exists with valid path
 */
export function hasImageMetadata(imageType: RegularImageType): boolean {
  return !!appConfig.images[imageType]?.path;
}

/**
 * Comments in English: Get all image types that have been uploaded
 * 
 * @returns Array of image types with valid metadata
 */
export function getUploadedImageTypes(): RegularImageType[] {
  return (Object.keys(appConfig.images) as RegularImageType[]).filter(
    (key) => appConfig.images[key]?.path
  );
}

/**
 * Comments in English: Get image upload timestamp
 * 
 * @param imageType - Type of regular image
 * @returns ISO 8601 timestamp string or null
 */
export function getImageUploadDate(imageType: RegularImageType): string | null {
  return appConfig.images[imageType]?.uploadedAt || null;
}

// Last updated: 2025-10-07T18:19:34.541Z
// Generated by: app-config-persist-api

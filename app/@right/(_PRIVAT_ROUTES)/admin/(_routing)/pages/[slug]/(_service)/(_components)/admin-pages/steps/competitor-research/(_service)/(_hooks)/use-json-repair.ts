// @/app/@right/(_PRIVAT_ROUTES)/admin/(_routing)/pages/[slug]/(_service)/(_components)/admin-pages/steps/competitor-research/(_service)/(_hooks)/use-json-repair.ts

"use client";

import { useState, useCallback } from "react";
import { toast } from "sonner";

import {
  JsonRepairRequest,
  JsonRepairResult,
  JsonRepairState,
} from "../(_types)/json-repair-types";
import {
  JsonRepairServerRequest,
  repairJsonServerAction,
} from "../(_actions)/json-repair-action";

export function useJsonRepair() {
  const [repairState, setRepairState] = useState<JsonRepairState>({
    isRepairing: false,
    repairResult: null,
    showRepairTool: false,
    repairAttempts: 0,
  });

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ JSON —á–µ—Ä–µ–∑ Server Action
   */
  const repairJsonWithServer = useCallback(
    async (request: JsonRepairRequest): Promise<JsonRepairResult> => {
      console.log("üîß Client: Starting JSON repair via Server Action:", {
        originalLength: request.invalidJsonString.length,
        competitorName: request.competitorName,
        attempt: repairState.repairAttempts + 1,
      });

      try {
        const serverRequest: JsonRepairServerRequest = {
          invalidJsonString: request.invalidJsonString,
          competitorUrl: request.competitorUrl,
          competitorName: request.competitorName,
        };

        console.log("üîß Client: Calling Server Action...");

        const serverResult = await repairJsonServerAction(
          serverRequest,
          repairState.repairAttempts + 1
        );

        console.log("‚úÖ Client: Server Action response:", {
          success: serverResult.success,
          confidence: serverResult.confidence,
        });

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Ö—É–∫–∞
        const result: JsonRepairResult = {
          success: serverResult.success,
          repairedData: serverResult.repairedData,
          error: serverResult.error,
          repairMethod: "openai",
          originalLength: serverResult.originalLength,
          repairedLength: serverResult.repairedLength,
          confidence: serverResult.confidence,
        };

        return result;
      } catch (error) {
        console.error("‚ùå Client: Server Action call failed:", error);

        const errorMessage =
          error instanceof Error
            ? `Server Action Error: ${error.message}`
            : "JSON repair request failed";

        return {
          success: false,
          error: errorMessage,
          repairMethod: "openai",
          originalLength: request.invalidJsonString.length,
          repairedLength: 0,
          confidence: 0,
        };
      }
    },
    [repairState.repairAttempts]
  );

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–æ–≤
   */
  const repairInvalidJson = useCallback(
    async (request: JsonRepairRequest): Promise<JsonRepairResult> => {
      console.log("üîß Client: repairInvalidJson called:", {
        competitorName: request.competitorName,
        currentAttempts: repairState.repairAttempts,
        maxAttempts: 3,
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
      if (repairState.repairAttempts >= 3) {
        console.warn("‚ö†Ô∏è Client: Maximum repair attempts reached");
        return {
          success: false,
          error: "Maximum repair attempts reached",
          repairMethod: "none",
          originalLength: request.invalidJsonString.length,
          repairedLength: 0,
          confidence: 0,
        };
      }

      setRepairState((prev) => ({
        ...prev,
        isRepairing: true,
        repairAttempts: prev.repairAttempts + 1,
      }));

      try {
        const result = await repairJsonWithServer(request);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if (result.success && result.confidence < 0.6) {
          console.warn(
            "‚ö†Ô∏è Client: Repair confidence below threshold:",
            result.confidence
          );
          toast.warning(
            `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é: ${Math.round(result.confidence * 100)}%`
          );
        }

        setRepairState((prev) => ({
          ...prev,
          isRepairing: false,
          repairResult: result,
        }));

        if (result.success) {
          toast.success("JSON —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò", {
            description: `–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(result.confidence * 100)}%`,
          });
        } else {
          toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON", {
            description: result.error,
          });
        }

        return result;
      } catch (error) {
        console.error(
          "‚ùå Client: Unexpected error in repairInvalidJson:",
          error
        );

        const result: JsonRepairResult = {
          success: false,
          error: error instanceof Error ? error.message : "JSON repair failed",
          repairMethod: "none",
          originalLength: request.invalidJsonString.length,
          repairedLength: 0,
          confidence: 0,
        };

        setRepairState((prev) => ({
          ...prev,
          isRepairing: false,
          repairResult: result,
        }));

        return result;
      }
    },
    [repairState.repairAttempts, repairJsonWithServer]
  );

  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const resetRepairState = useCallback(() => {
    console.log("üîÑ Client: Resetting repair state");
    setRepairState({
      isRepairing: false,
      repairResult: null,
      showRepairTool: false,
      repairAttempts: 0,
    });
  }, []);

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const toggleRepairTool = useCallback(() => {
    setRepairState((prev) => ({
      ...prev,
      showRepairTool: !prev.showRepairTool,
    }));
  }, []);

  return {
    repairState,
    repairInvalidJson,
    resetRepairState,
    toggleRepairTool,
    isRepairing: repairState.isRepairing,
    canRepair: repairState.repairAttempts < 3,
  };
}

// @/app/@right/(_PRIVAT_ROUTES)/admin/(_routing)/pages/[slug]/(_service)/(_context)/admin-pages-nav-context.ts

"use client";

import {
  createContext,
  useContext,
  useState,
  ReactNode,
  useEffect,
  useMemo,
} from "react";
import {
  ADMIN_PAGES_CONFIG,
  ADMIN_PAGES_TABS,
  IndicatorStatus,
  canActivateStep,
} from "../(_config)/admin-pages-config";

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
import {
  getAllCompletedSteps,
  getStepsDebugInfo,
} from "../(_config)/step-completion-config";

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
import { useStepsOrchestrator } from "../(_hooks)/use-steps-orchestrator";
import { PageData } from "@/app/@right/(_service)/(_types)/page-types";

export type AdminPageTab =
  | "info"
  | "step1"
  | "step2"
  | "step3"
  | "step4"
  | "step5"
  | "step6"
  | "step7"
  | "step8"
  | "step9"
  | "step10"
  | "step11"
  | "preview"
  | "deploy";

export type DisplayMode = "all" | "required";

type IndicatorStatuses = {
  [K in AdminPageTab]?: IndicatorStatus;
};

interface AdminPagesNavContextType {
  activeTab: AdminPageTab;
  setActiveTab: (tab: AdminPageTab) => void;
  slug: string;
  indicatorStatuses: IndicatorStatuses;
  setIndicatorStatus: (tab: AdminPageTab, status: IndicatorStatus) => void;
  getIndicatorStatus: (tab: AdminPageTab) => IndicatorStatus | undefined;
  completedSteps: AdminPageTab[];
  markStepAsCompleted: (step: AdminPageTab) => void;
  canActivateStep: (step: AdminPageTab) => boolean;
  isStepCompleted: (step: AdminPageTab) => boolean;
  displayMode: DisplayMode;
  setDisplayMode: (mode: DisplayMode) => void;

  // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Steps Orchestrator
  pageData: PageData | null;
  isPageDataLoading: boolean;
  pageDataError: string | null;
  refreshPageData: () => void;
  debugInfo: Record<AdminPageTab, string>;
}

const AdminPagesNavContext = createContext<
  AdminPagesNavContextType | undefined
>(undefined);

interface AdminPagesNavBarProviderProps {
  children: ReactNode;
  slug: string;
  defaultTab?: AdminPageTab;
}

export function AdminPagesNavBarProvider({
  children,
  slug,
  defaultTab = ADMIN_PAGES_CONFIG.defaultTab,
}: AdminPagesNavBarProviderProps) {
  const [activeTab, setActiveTab] = useState<AdminPageTab>(defaultTab);
  const [displayMode, setDisplayMode] = useState<DisplayMode>("required");

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Steps Orchestrator –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const {
    pageData,
    isLoading: isPageDataLoading,
    error: pageDataError,
    refreshPageData,
    updatePageData,
    updatePageDataField,
    syncPageDataToServer,
    getOrchestratorStatus,
  } = useStepsOrchestrator(slug);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —à–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const completedSteps = useMemo(() => {
    const computed = getAllCompletedSteps(pageData);

    if (process.env.NODE_ENV === "development") {
      console.log("üé≠ Context: Computing completed steps", {
        slug,
        pageDataAvailable: !!pageData,
        computedSteps: computed,
      });
    }

    return computed;
  }, [pageData, slug]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  const debugInfo = useMemo(() => {
    return getStepsDebugInfo(pageData);
  }, [pageData]);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —á–µ—Ä–µ–∑ useMemo
  const initialStatuses: IndicatorStatuses = useMemo(() => {
    const statuses: IndicatorStatuses = {};
    ADMIN_PAGES_TABS.forEach((tab) => {
      if (tab.hasIndicator && tab.defaultIndicatorStatus) {
        statuses[tab.key] = tab.defaultIndicatorStatus;
      }
    });
    return statuses;
  }, []);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
  const computedIndicatorStatuses = useMemo(() => {
    const newStatuses: IndicatorStatuses = { ...initialStatuses };

    ADMIN_PAGES_TABS.forEach((tab) => {
      if (tab.hasIndicator) {
        if (completedSteps.includes(tab.key)) {
          // –®–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω - –∑–µ–ª–µ–Ω—ã–π
          newStatuses[tab.key] = "green";
        } else if (canActivateStep(tab.key, completedSteps)) {
          // –®–∞–≥ –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é - –æ—Ä–∞–Ω–∂–µ–≤—ã–π
          newStatuses[tab.key] = "orange";
        } else {
          // –®–∞–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–µ—Ä—ã–π
          newStatuses[tab.key] = "gray";
        }
      }
    });

    return newStatuses;
  }, [completedSteps, initialStatuses]);

  const [indicatorStatuses, setIndicatorStatuses] = useState<IndicatorStatuses>(
    computedIndicatorStatuses
  );

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    setIndicatorStatuses(computedIndicatorStatuses);
  }, [computedIndicatorStatuses]);

  const setIndicatorStatus = (tab: AdminPageTab, status: IndicatorStatus) => {
    setIndicatorStatuses((prev) => ({
      ...prev,
      [tab]: status,
    }));
  };

  const getIndicatorStatus = (
    tab: AdminPageTab
  ): IndicatorStatus | undefined => {
    return indicatorStatuses[tab];
  };

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏—è –ø–æ–º–µ—á–∞–Ω–∏—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞—Ä–µ–ª–∞
  const markStepAsCompleted = (step: AdminPageTab) => {
    console.warn(`üé≠ markStepAsCompleted(${step}) —É—Å—Ç–∞—Ä–µ–ª–∞!`);
    console.log(
      `–®–∞–≥–∏ —Ç–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö PageData.`
    );
    console.log(
      `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞ ${step} –æ–±–Ω–æ–≤–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ pageData:`,
      debugInfo[step]
    );
  };

  const canActivateStepLocal = (step: AdminPageTab): boolean => {
    return canActivateStep(step, completedSteps);
  };

  const isStepCompleted = (step: AdminPageTab): boolean => {
    return completedSteps.includes(step);
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
  const contextValue = useMemo(
    () => ({
      activeTab,
      setActiveTab,
      slug,
      indicatorStatuses,
      setIndicatorStatus,
      getIndicatorStatus,
      completedSteps,
      markStepAsCompleted,
      canActivateStep: canActivateStepLocal,
      isStepCompleted,
      displayMode,
      setDisplayMode,

      // ‚úÖ –ù–û–í–´–ï –ü–û–õ–Ø: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      pageData,
      isPageDataLoading,
      pageDataError,
      refreshPageData,
      debugInfo,
    }),
    [
      activeTab,
      slug,
      indicatorStatuses,
      completedSteps,
      displayMode,
      pageData,
      isPageDataLoading,
      pageDataError,
      refreshPageData,
      debugInfo,
    ]
  );

  return (
    <AdminPagesNavContext.Provider value={contextValue}>
      {children}
    </AdminPagesNavContext.Provider>
  );
}

export function useAdminPagesNav() {
  const context = useContext(AdminPagesNavContext);

  if (context === undefined) {
    throw new Error(
      "useAdminPagesNav must be used within an AdminPagesNavBarProvider"
    );
  }

  return context;
}

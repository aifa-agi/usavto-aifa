// @/app/@right/(_PRIVAT_ROUTES)/admin/(_routing)/pages/[slug]/(_service)/(_actions)/json-repair-action.ts

"use server";

import { generateObject } from "ai";
import { openai } from "@ai-sdk/openai";
import { CompetitorAnalysisSchema } from "../(_libs)/competitor-analysis-schema";

export interface JsonRepairServerRequest {
  invalidJsonString: string;
  competitorUrl: string;
  competitorName: string;
}

export interface JsonRepairServerResult {
  success: boolean;
  repairedData?: any;
  error?: string;
  originalLength: number;
  repairedLength: number;
  confidence: number;
}

const OPENAI_MODEL = "gpt-4.1-2025-04-14";
const MIN_CONFIDENCE_THRESHOLD = 0.6;
const MAX_REPAIR_ATTEMPTS = 3;

/**
 * Server Action –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è JSON —á–µ—Ä–µ–∑ OpenAI
 */
export async function repairJsonServerAction(
  request: JsonRepairServerRequest,
  attemptNumber: number = 1
): Promise<JsonRepairServerResult> {
  console.log("üîß Server: Starting JSON repair with OpenAI:", {
    originalLength: request.invalidJsonString.length,
    competitorName: request.competitorName,
    attempt: attemptNumber,
  });

  try {
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const repairPrompt = `
You are an expert JSON repair tool. Fix the following invalid JSON data for competitor analysis.

Competitor Information:
- Name: ${request.competitorName}
- URL: ${request.competitorUrl}

Invalid JSON Data:
${request.invalidJsonString}

Requirements:
1. Repair and structure the data according to CompetitorAnalysis format
2. Extract meaningful competitive intelligence from the content
3. Ensure all required fields are properly filled
4. Maintain semantic meaning from original data
5. Generate realistic analysis based on the content

Return a properly structured CompetitorAnalysis JSON object.
`;

    console.log("üîß Server: Generated repair prompt, calling OpenAI...");

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ OpenAI generateObject –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const { object } = await generateObject({
      model: openai(OPENAI_MODEL),
      schema: CompetitorAnalysisSchema,
      prompt: repairPrompt,
      temperature: 0.2, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    });

    console.log("‚úÖ Server: OpenAI repair successful:", {
      repairedDataKeys: Object.keys(object),
      competitorStructureLength: object.competitorStructure?.length || 0,
    });

    // –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    const confidence = calculateRepairConfidence(
      object,
      request.invalidJsonString
    );

    const result: JsonRepairServerResult = {
      success: true,
      repairedData: object,
      originalLength: request.invalidJsonString.length,
      repairedLength: JSON.stringify(object).length,
      confidence,
    };

    console.log("‚úÖ Server: JSON repair completed:", {
      confidence,
      originalLength: result.originalLength,
      repairedLength: result.repairedLength,
    });

    return result;
  } catch (error) {
    console.error("‚ùå Server: OpenAI repair failed:", error);

    const errorMessage =
      error instanceof Error
        ? `OpenAI API Error: ${error.message}`
        : "JSON repair failed";

    return {
      success: false,
      error: errorMessage,
      originalLength: request.invalidJsonString.length,
      repairedLength: 0,
      confidence: 0,
    };
  }
}

/**
 * –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
 */
function calculateRepairConfidence(
  repairedData: any,
  originalData: string
): number {
  let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
  if (repairedData.competitorName && repairedData.href) confidence += 0.2;
  if (
    repairedData.competitorStructure &&
    repairedData.competitorStructure.length > 0
  )
    confidence += 0.2;
  if (repairedData.overallAnalysis) confidence += 0.1;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const originalWordCount = originalData.split(/\s+/).length;
  if (originalWordCount > 100) confidence += 0.1;
  if (originalWordCount > 500) confidence += 0.1;

  return Math.min(confidence, 1.0);
}

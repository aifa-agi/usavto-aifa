// @/app/integrations/lib/api/ai-text-transformer.ts

import { openai } from "@ai-sdk/openai";
import { generateObject } from "ai";
import { z } from "zod";
import { prisma } from "@/lib/db";

/**
 * AI SDK v5 compatible streaming message format with custom parts
 */
interface StreamingMessage {
  type: "append-message" | "update-message";
  message: {
    id: string;
    role: "assistant";
    createdAt: string;
    parts: MessagePart[];
  };
}

type MessagePart = TextPart | ProductPart | SuggestionPart;

interface TextPart {
  type: "text";
  text: string;
}

interface ProductPart {
  type: "data-product";
  id: string;
  data: {
    product_id: string;
  };
}

interface SuggestionPart {
  type: "data-suggestion";
  id: string;
  data: {
    suggestion_id: string;
  };
}

/**
 * Zod schema for validation of AI-generated output
 */
const MessagePartSchema = z.union([
  z.object({
    type: z.literal("text"),
    text: z.string(),
  }),
  z.object({
    type: z.literal("data-product"),
    id: z.string(),
    data: z.object({
      product_id: z.string(),
    }),
  }),
  z.object({
    type: z.literal("data-suggestion"),
    id: z.string(),
    data: z.object({
      suggestion_id: z.string(),
    }),
  }),
]);

const StreamingMessageSchema = z.object({
  type: z.enum(["append-message", "update-message"]),
  message: z.object({
    id: z.string(),
    role: z.literal("assistant"),
    createdAt: z.string(),
    parts: z.array(MessagePartSchema),
  }),
});

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –∫–æ—Ä–æ—Ç–∫–∏–º (6 —Å–∏–º–≤–æ–ª–æ–≤)
 * @param productId - ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns boolean - true –µ—Å–ª–∏ ID –∫–æ—Ä–æ—Ç–∫–∏–π (6 —Å–∏–º–≤–æ–ª–æ–≤)
 */
function isShortProductId(productId: string): boolean {
  return typeof productId === "string" && productId.length === 6;
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ product_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É
 * @param shortId - –ö–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (6 —Å–∏–º–≤–æ–ª–æ–≤)
 * @returns Promise<string | null> - –ü–æ–ª–Ω—ã–π product_id –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
async function findFullProductIdInDb(shortId: string): Promise<string | null> {
  try {
    if (!shortId || shortId.length !== 6) {
      console.warn(`‚ö†Ô∏è Invalid short ID format: "${shortId}"`);
      return null;
    }

    console.log(`üîç Searching for full product ID with short ID: ${shortId}`);

    // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ productId –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å shortId
    const product = await prisma.product.findFirst({
      where: {
        productId: {
          startsWith: shortId,
        },
      },
      select: {
        productId: true,
      },
    });

    if (product) {
      console.log(
        `‚úÖ Found full product ID: ${shortId} -> ${product.productId}`
      );
      return product.productId;
    } else {
      console.warn(`‚ùå No product found for short ID: ${shortId}`);
      return null;
    }
  } catch (error) {
    console.error("‚ùå Error searching for full product ID:", error);
    return null;
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª–Ω—ã—Ö product_id –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
 * @param shortIds - –ú–∞—Å—Å–∏–≤ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
 * @returns Promise<Map<string, string>> - –ö–∞—Ä—Ç–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π shortId -> fullId
 */
async function findMultipleFullProductIds(
  shortIds: string[]
): Promise<Map<string, string>> {
  try {
    if (shortIds.length === 0) {
      return new Map();
    }

    console.log(
      `üîç Bulk searching for ${shortIds.length} short product IDs:`,
      shortIds
    );

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ª—é–±–æ–≥–æ –∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö ID
    const products = await prisma.product.findMany({
      where: {
        OR: shortIds.map((shortId) => ({
          productId: {
            startsWith: shortId,
          },
        })),
      },
      select: {
        productId: true,
      },
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
    const mapping = new Map<string, string>();

    products.forEach((product) => {
      const fullId = product.productId;
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π ID (–ø–µ—Ä–≤—ã–µ 6 —Å–∏–º–≤–æ–ª–æ–≤)
      const matchingShortId = shortIds.find((shortId) =>
        fullId.startsWith(shortId)
      );

      if (matchingShortId) {
        mapping.set(matchingShortId, fullId);
      }
    });

    console.log(
      `‚úÖ Found ${mapping.size} full product IDs out of ${shortIds.length} requested`
    );

    return mapping;
  } catch (error) {
    console.error("‚ùå Error in bulk product ID search:", error);
    return new Map();
  }
}

/**
 * –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–º–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö product_id –≤ parts
 * @param parts - –ú–∞—Å—Å–∏–≤ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns Promise<MessagePart[]> - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –ø–æ–ª–Ω—ã–º–∏ product_id
 */
async function resolveProductIds(parts: MessagePart[]): Promise<MessagePart[]> {
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ—Ä–æ—Ç–∫–∏–µ product_id –∏–∑ data-product parts
  const shortProductIds: string[] = [];

  parts.forEach((part) => {
    if (
      part.type === "data-product" &&
      isShortProductId(part.data.product_id)
    ) {
      shortProductIds.push(part.data.product_id);
    }
  });

  if (shortProductIds.length === 0) {
    // –ù–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    return parts;
  }

  // –ú–∞—Å—Å–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª–Ω—ã—Ö ID
  const idMapping = await findMultipleFullProductIds(shortProductIds);

  // –ó–∞–º–µ–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ ID –Ω–∞ –ø–æ–ª–Ω—ã–µ –≤ parts
  return parts.map((part) => {
    if (
      part.type === "data-product" &&
      isShortProductId(part.data.product_id)
    ) {
      const fullId = idMapping.get(part.data.product_id);

      if (fullId) {
        console.log(
          `üîÑ Replacing short product ID: ${part.data.product_id} -> ${fullId}`
        );
        return {
          ...part,
          data: {
            ...part.data,
            product_id: fullId,
          },
        };
      } else {
        console.warn(
          `‚ö†Ô∏è Could not resolve short product ID: ${part.data.product_id}`
        );
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é part —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID –∫–∞–∫ fallback
        return part;
      }
    }

    return part;
  });
}

/**
 * Transform raw text data containing mixed content and JSON fragments
 * into properly structured StreamingMessage format using OpenAI GPT-4.1
 * –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–µ product_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
 */
export async function transformTextToStreamingMessage(
  rawTextData: string
): Promise<StreamingMessage | null> {
  try {
    const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑ streaming chat API –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π –µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç StreamingMessage.

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
${rawTextData}

–ó–ê–î–ê–ß–ê:
1. –ò–∑–≤–ª–µ–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (—É–±–µ—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ JSON —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞)
2. –ù–∞–π–¥–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ JSON —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ "data-product" –∏ "data-suggestion"
3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç parts

üö® –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –ü–û–†–Ø–î–ö–ê –í –ú–ê–°–°–ò–í–ï PARTS:
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–û–ë–õ–Æ–î–ê–ô –°–¢–†–û–ì–£–Æ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨:
1. –ü–ï–†–í–´–ú –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å type: "text" (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)
2. –í–¢–û–†–´–ú–ò –∏–¥—É—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å type: "data-product" (–µ—Å–ª–∏ –µ—Å—Ç—å)
3. –ü–û–°–õ–ï–î–ù–ò–ú–ò –∏–¥—É—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å type: "data-suggestion" (–µ—Å–ª–∏ –µ—Å—Ç—å)

–ü–†–ê–í–ò–õ–ê –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø:
- –î–ª—è data-product: —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç —Å type: "data-product", —É–Ω–∏–∫–∞–ª—å–Ω—ã–º id (–Ω–∞–ø—Ä–∏–º–µ—Ä "product-1", "product-2"), –∏ –≤ data.product_id –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON
- –î–ª—è data-suggestion: —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç —Å type: "data-suggestion", —É–Ω–∏–∫–∞–ª—å–Ω—ã–º id (–Ω–∞–ø—Ä–∏–º–µ—Ä "suggestion-1", "suggestion-2"), –∏ –≤ data.suggestion_id –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–º–µ—Å—Ç–∏ –≤ part —Å type: "text" - –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú –≤ –º–∞—Å—Å–∏–≤–µ
- –°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è id, createdAt –∏ type —Å–æ–æ–±—â–µ–Ω–∏—è

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ product_id –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (6 —Å–∏–º–≤–æ–ª–æ–≤), —Å–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –ø–æ–ª–Ω—ã–π ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ú–ê–°–°–ò–í–ê PARTS:
[
  { "type": "text", ... },           // –í–°–ï–ì–î–ê –ü–ï–†–í–´–ô
  { "type": "data-product", ... },   // –í–¢–û–†–´–ï (–µ—Å–ª–∏ –µ—Å—Ç—å)
  { "type": "data-product", ... },   // (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
  { "type": "data-suggestion", ... }, // –ü–û–°–õ–ï–î–ù–ò–ï (–µ—Å–ª–∏ –µ—Å—Ç—å)
  { "type": "data-suggestion", ... }  // (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
]

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê:
{
  "type": "update-message",
  "message": {
    "id": "msg_def456",
    "role": "assistant",
    "createdAt": "2025-08-13T12:00:00.000Z",
    "parts": [
      {
        "type": "text",
        "text": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ JSON —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"
      },
      {
        "type": "data-product",
        "id": "product-1",
        "data": {
          "product_id": "4901ab"
        }
      },
      {
        "type": "data-suggestion",
        "id": "suggestion-1",
        "data": {
          "suggestion_id": "–°–ª–∞–¥–∫–æ–µ"
        }
      },
      {
        "type": "data-suggestion",
        "id": "suggestion-2",
        "data": {
          "suggestion_id": "–ù–∞–ø–∏—Ç–∫–∏"
        }
      }
    ]
  }
}

–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π –ø–æ—Ä—è–¥–æ–∫ parts: text ‚Üí data-product ‚Üí data-suggestion
`;

    const result = await generateObject({
      model: openai("gpt-4.1"),
      schema: StreamingMessageSchema,
      prompt: prompt,
      temperature: 0.1, // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ parts –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI
    const isOrderCorrect = validatePartsOrder(result.object.message.parts);
    if (!isOrderCorrect) {
      console.warn(
        "‚ö†Ô∏è AI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ parts, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º..."
      );
      result.object.message.parts = reorderParts(result.object.message.parts);
    }

    // –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ product_id –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –ø–æ–ª–Ω—ã–µ
    console.log("üîÑ Processing product IDs...");
    result.object.message.parts = await resolveProductIds(
      result.object.message.parts
    );

    console.log(
      "‚úÖ AI Text Transformer: —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ StreamingMessage —Å –ø–æ–ª–Ω—ã–º–∏ product_id"
    );

    return result.object;
  } catch (error) {
    console.error("‚ùå AI Text Transformer error:", error);

    // Fallback: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ AI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º product_id
    try {
      const parsedData = JSON.parse(rawTextData);
      if (parsedData.message && parsedData.message.parts) {
        const textParts: MessagePart[] = [];
        const productParts: MessagePart[] = [];
        const suggestionParts: MessagePart[] = [];

        for (const part of parsedData.message.parts) {
          if (part.type === "text") {
            const cleanText = part.text
              .replace(/\{\"type\":\s*\"data-product\"[^}]*\}/g, "")
              .replace(/\{\"type\":\s*\"data-suggestion\"[^}]*\}/g, "")
              .trim();
            if (cleanText) {
              textParts.push({
                type: "text",
                text: cleanText,
              });
            }
          } else if (part.type === "data-product") {
            productParts.push(part as ProductPart);
          } else if (part.type === "data-suggestion") {
            suggestionParts.push(part as SuggestionPart);
          }
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: text ‚Üí data-product ‚Üí data-suggestion
        let orderedParts = [...textParts, ...productParts, ...suggestionParts];

        // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú product_id –≤ fallback —Ä–µ–∂–∏–º–µ
        try {
          orderedParts = await resolveProductIds(orderedParts);
          console.log("‚úÖ Fallback: –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã product_id");
        } catch (resolveError) {
          console.warn(
            "‚ö†Ô∏è Fallback: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å product_id:",
            resolveError
          );
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ parts
        }

        console.log("‚úÖ Fallback: –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ parts");

        return {
          type: parsedData.type || "update-message",
          message: {
            id: parsedData.message.id,
            role: "assistant",
            createdAt: parsedData.message.createdAt,
            parts: orderedParts,
          },
        };
      }
    } catch (fallbackError) {
      console.error("‚ùå Fallback parsing —Ç–∞–∫–∂–µ failed:", fallbackError);
    }

    return null;
  }
}

/**
 * Validate that parts are in correct order: text ‚Üí data-product ‚Üí data-suggestion
 */
export function validatePartsOrder(parts: MessagePart[]): boolean {
  let currentStage = 0; // 0: text, 1: data-product, 2: data-suggestion

  for (const part of parts) {
    if (part.type === "text" && currentStage > 0) {
      return false; // text should come first
    }
    if (part.type === "data-product") {
      if (currentStage === 0) currentStage = 1;
      if (currentStage > 1) return false; // data-product after data-suggestion
    }
    if (part.type === "data-suggestion") {
      currentStage = 2;
    }
  }

  return true;
}

/**
 * Reorder parts to correct sequence: text ‚Üí data-product ‚Üí data-suggestion
 */
export function reorderParts(parts: MessagePart[]): MessagePart[] {
  const textParts: MessagePart[] = [];
  const productParts: MessagePart[] = [];
  const suggestionParts: MessagePart[] = [];

  for (const part of parts) {
    if (part.type === "text") {
      textParts.push(part);
    } else if (part.type === "data-product") {
      productParts.push(part);
    } else if (part.type === "data-suggestion") {
      suggestionParts.push(part);
    }
  }

  return [...textParts, ...productParts, ...suggestionParts];
}

/**
 * Utility function to validate StreamingMessage structure
 */
export function validateStreamingMessage(
  data: unknown
): data is StreamingMessage {
  try {
    StreamingMessageSchema.parse(data);
    return true;
  } catch {
    return false;
  }
}

/**
 * Clean text from embedded JSON fragments (fallback function)
 */
export function cleanTextFromJsonFragments(text: string): string {
  return text
    .replace(/\{\"type\":\s*\"data-product\"[^}]*\}/g, "")
    .replace(/\{\"type\":\s*\"data-suggestion\"[^}]*\}/g, "")
    .trim();
}

/**
 * –ù–û–í–ê–Ø –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ product_id
 * –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param shortId - –ö–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
 * @returns Promise<string | null> - –ü–æ–ª–Ω—ã–π product_id –∏–ª–∏ null
 */
export async function resolveFullProductId(
  shortId: string
): Promise<string | null> {
  return await findFullProductIdInDb(shortId);
}
